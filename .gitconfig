#         _ _                   __ _
#    __ _(_) |_ ___ ___  _ __  / _(_) __ _
#   / _` | | __/ __/ _ \| '_ \| |_| |/ _` |
#  | (_| | | || (_| (_) | | | |  _| | (_| |
# (_)__, |_|\__\___\___/|_| |_|_| |_|\__, |
#   |___/                            |___/
#

[core]
  editor = vim
[color]
  ui = auto
  status = auto
  branch = auto
  interactive = auto
  diff = auto
[credential]
  helper = "cache --timeout=3600"
[alias]
  al = "!git config --get-regexp \"^alias\\.\" | sort | awk 'gsub(\"alias.\", \"\") split($0, array) {printf(\"\\033[36m%-10s\\033[0m alias for \\\"\", array[1]); for (i=2; i <= length(array); i++) if(i > 2) { printf(\"%s\", \" \" array[i]) } else { printf(\"%s\", array[i]) }; printf(\"\\\"\\n\")}'"
  b = branch
  ba = branch -a
  bd = branch -D
  c = commit
  ca = "!f() { if [ -z \"$1\" ]; then git commit --amend --no-edit; else git commit --amend --no-edit -m \"$1\"; fi; }; f"
  cm = commit -m
  co = checkout
  cob = checkout -b
  cp = "!f() { if [ -z \"$1\" ]; then git id | git cherry-pick; else git cherry-pick $1; fi; }; f"
  id = show -s --format=%H
  st = status
  s = stash
  sa = "!f() { if [ -z \"$1\" ]; then git stash apply; else git stash apply stash@{$1}; fi; }; f"
  sd = "!f() { if [ -z \"$1\" ]; then git stash drop; else git stash drop stash@{$1}; fi; }; f"
  sl = stash list
  sp = "!f() { if [ -z \"$1\" ]; then git stash pop; else git stash pop stash@{$1}; fi; }; f"
  ss = "!f() { if [ -z \"$1\" ]; then git stash show -p; else git stash show -p stash@{$1}; fi; }; f"
  su = stash -u
  tr = log --graph --pretty='format:%C(yellow)%h%Creset %s %Cgreen(%an)%Creset %Cred%d%Creset'
  r = reset
  rb = rebase
  rbi = rebase -i
  rbc = rebase --continue
  rh = reset --hard
  rr = "!f() { if [ -z \"$1\" ]; then git reset HEAD@{1}; else git reset HEAD@{$1}; fi; }; f"
  rl = reflog
[include]
  path = ~/.gitconfig.local

