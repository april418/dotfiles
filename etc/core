#!/bin/bash

#
#   ___ ___  _ __ ___
#  / __/ _ \| '__/ _ \
# | (_| (_) | | |  __/
#  \___\___/|_|  \___|
#
#
# This script define core modules.
#
# Table of modules:
#   - progress  | echo rich progress infomation
#   - logger    | logging error infomations
#   - detect_os | detect OS destribution and version
#   - package   | wrapping package manager
#

# Set DOTPATH as default variable
if [ -z "${DOTPATH:-}" ]; then
  DOTPATH=~/.dotfiles
  export DOTPATH
fi

# is_exists returns true if executable $1 exists in $PATH
is_exists() {
  which "$1" >/dev/null 2>&1
  return $?
}



#
#  _ __  _ __ ___   __ _ _ __ ___  ___ ___
# | '_ \| '__/ _ \ / _` | '__/ _ \/ __/ __|
# | |_) | | | (_) | (_| | | |  __/\__ \__ \
# | .__/|_|  \___/ \__, |_|  \___||___/___/
# |_|              |___/
#

e_newline() {
  printf "\n"
}

e_header() {
  printf " \033[37;1m%s\033[m\n" "$*"
}

e_error() {
  printf " \033[31m%s\033[m\n" "✖ $*" 1>&2
}

e_warning() {
  printf " \033[31m%s\033[m\n" "$*"
}

e_done() {
  printf " \033[37;1m%s\033[m...\033[32mOK\033[m\n" "✔ $*"
}

e_arrow() {
  printf " \033[37;1m%s\033[m\n" "-> $*"
}

e_indent() {
  for ((i=0; i<${1:-4}; i++)); do
    echon " "
  done

  if [ -n "$2" ]; then
    echo "$2"
  else
    cat <&0
  fi
}

e_success() {
  printf " \033[37;1m%s\033[m%s...\033[32mOK\033[m\n" "✔ " "$*"
}

e_failure() {
  die "${1:-$FUNCNAME}"
}

# echon is a script to emulate the -n flag functionality with 'echo'
# for Unix systems that don't have that available.
echon() {
  echo "$*" | tr -d '\n'
}

# die returns exit code error and echo error message
die() {
  e_error "$1" 1>&2
  exit "${2:-1}"
}



#  _
# | | ___   __ _  __ _  ___ _ __
# | |/ _ \ / _` |/ _` |/ _ \ '__|
# | | (_) | (_| | (_| |  __/ |
# |_|\___/ \__, |\__, |\___|_|
#          |___/ |___/
#

ink() {
  if [ "$#" -eq 0 -o "$#" -gt 2 ]; then
    echo "Usage: ink <color> <text>"
    echo "Colors:"
    echo "  black, white, red, green, yellow, blue, purple, cyan, gray"
    return 1
  fi

  local open="\033["
  local close="${open}0m"
  local black="0;30m"
  local red="1;31m"
  local green="1;32m"
  local yellow="1;33m"
  local blue="1;34m"
  local purple="1;35m"
  local cyan="1;36m"
  local gray="0;37m"
  local white="$close"

  local text="$1"
  local color="$close"

  if [ "$#" -eq 2 ]; then
    text="$2"
    case "$1" in
      black | red | green | yellow | blue | purple | cyan | gray | white)
        eval color="\$$1"
        ;;
    esac
  fi

  printf "${open}${color}${text}${close}"
}

logging() {
  if [ "$#" -eq 0 -o "$#" -gt 2 ]; then
    echo "Usage: ink <fmt> <msg>"
    echo "Formatting Options:"
    echo "  TITLE, ERROR, WARN, INFO, SUCCESS"
    return 1
  fi

  local color=
  local text="$2"

  case "$1" in
    TITLE)        color=yellow ;;
    ERROR | WARN) color=red    ;;
    INFO)         color=blue   ;;
    SUCCESS)      color=green  ;;
    *)            text="$1"
  esac

  timestamp() {
    ink gray "["
    ink purple "$(date +%H:%M:%S)"
    ink gray "] "
  }

  timestamp; ink "$color" "$text"; echo
}

log_pass() {
  logging SUCCESS "$1"
}

log_fail() {
  logging ERROR "$1" 1>&2
}

log_fail() {
  logging WARN "$1"
}

log_info() {
  logging INFO "$1"
}

log_echo() {
  logging TITLE "$1"
}



#      _      _            _
#   __| | ___| |_ ___  ___| |_    ___  ___
#  / _` |/ _ \ __/ _ \/ __| __|  / _ \/ __|
# | (_| |  __/ ||  __/ (__| |_  | (_) \__ \
#  \__,_|\___|\__\___|\___|\__|  \___/|___/
#
#
# This code inspired by @koara-local.
# https://github.com/koara-local/dotfiles/edit/master/bin/get_os_info
#
# Thanks a lot!

pattern='[-_]release$\|[-_]version$'

detect_os_version() {
  ls /etc | grep $pattern | xargs -n1 -I{} cat /etc/{} | uniq | tr -dc '0-9.\n'
}

detect_os_bit() {
  echo $(uname -m)
}

detect_os_destribution() {
  local destribution_types=(debian redhat arch)
  local destributions=(centos ubuntu fedora oracle turbolinux suse mandriva vine gentoo)
  local destribution_type=
  local destribution=

  for i in $(ls /etc | grep $pattern | sed -e "s/$pattern//g" | tr 'A-Z' 'a-z')
  do
    case "${destribution_types[@]}" in
      *"$i"*) destribution_type="$i" ;;
    esac
    case "${destributions[@]}" in
      *"$i"*) destribution="$i" ;;
    esac
  done

  destribution_type=${destribution_type:-'unknown'}
  destribution=${destribution:-'unknown'}

  echo $destribution
  echo $destribution_type
}

detect_os() {
  detect_os_destribution
  detect_os_version
  detect_os_bit
}

is_debian() {
  test "$(detect_os_destribution | tail -n1)" = "debian"
  return $?
}

is_redhat() {
  test "$(detect_os_destribution | tail -n1)" = "redhat"
  return $?
}

is_arch() {
  test "$(detect_os_destribution | tail -n1)" = "arch"
  return $?
}



#                   _
#  _ __   __ _  ___| | _____  __ _  __ _  ___
# | '_ \ / _` |/ __| |/ / _ \/ _` |/ _` |/ _ \
# | |_) | (_| | (__|   <  __/ (_| | (_| |  __/
# | .__/ \__,_|\___|_|\_\___|\__,_|\__, |\___|
# |_|                              |___/
#

package() {
  usage_exit() {
    echo "Usage: package command package_name"
    echo
    echo "Commands:"
    echo "  install | install packeage"
    echo "  update  | update package"
    echo "  remove  | remove package"
    echo "  help    | show usage"
    echo
    exit 1
  }

  message_exit() {
    e_error "$1"
    exit 1
  }

  _package() {
    set -eu
    trap 'message_exit "Failed to $1 package"' ERR INT

    if is_debian; then
      apt-get -y $@ >/dev/null
    elif is_redhat; then
      yum -y $@ >/dev/null
    else
      message_exit "Unknown OS destribution"
    fi

    set +eu
  }

  option() {
    if is_debian; then
      case $1 in
        install) echo install ;;
        update)  echo upgrade ;;
        remove)  echo remove ;;
        help)    usage_exit ;;
        *)       usage_exit ;;
      esac
    elif is_redhat; then
      case $1 in
        install) echo install ;;
        update)  echo update ;;
        remove)  echo remove ;;
        help)    usage_exit ;;
        *)       usage_exit ;;
      esac
    else
      message_exit "Unknown OS destribution"
    fi
  }

  _package "$(option $1)" "$2"
}



